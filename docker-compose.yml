version: '3.7'

services:

  #############################################################################
  # API
  #############################################################################
  api:
    build:
      dockerfile: Dockerfile
      context: ./api
      target: dev
    restart: unless-stopped
    env_file: .env.docker
    environment:
      FLASK_DEBUG: 1
      FLASK_HOST: 0.0.0.0
      FLASK_ENV: development
      FLASK_APP: "main:app"
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
      AWS_ENDPOINT: http://localstack:4566
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: "8000"
      ES_HOST: http://elasticsearch:9200
      QUEUE_NAME: 'chatbot'
      REDIS_HOST: redis
      RQ_REDIS_URL: redis://redis:6379/0
    volumes:
      - ./api:/opt/app
    ports:
      - 127.0.0.1:5000:5000
#    networks:
#      - default
#      - chatbot-net

  chromadb:
    image: ghcr.io/chroma-core/chroma:0.4.19
    volumes:
      - chromadb_data:/chromadb_data
    ports:
      - 8000:8000

  #############################################################################
  # elasticsearch
  #############################################################################
  elasticsearch:
    environment:
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      http.host: 0.0.0.0
      transport.host: 127.0.0.1
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    hostname: socialplatforms
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    restart: "no"
    ports:
      - 127.0.0.1:9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  #############################################################################
  # LOCALSTACK (DEVELOPMENT ONLY)
  #############################################################################
  localstack:
    image: localstack/localstack:s3-latest
    # environment:
    #   SERVICES: sqs
    #   # HOST_TMP_FOLDER: /tmp/localstack
    #   DOCKER_HOST: /var/run/docker.sock
    #   START_WEB: 0
    volumes:
      - localstack-volume:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 127.0.0.1:4566:4566

  #############################################################################
  # LOCAL AWS CLI (DEVELOPMENT ONLY)
  #############################################################################
  awscli:
    image: amazon/aws-cli
    restart: "no"
    command: /bin/true
    environment:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
    volumes:
      - ./sample.csv:/tmp/sample.csv

  #############################################################################
  # Kibana
  #############################################################################
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    depends_on:
      - elasticsearch
    hostname: kibana
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 127.0.0.1:5601:5601


  #############################################################################
  # REDIS
  #############################################################################
  redis:
    image: redis:alpine
    restart: unless-stopped
    command: --appendonly yes
    volumes:
      - redis-volume:/data

  #############################################################################
  # RQ-WORKER
  #############################################################################
  worker:
    build:
      dockerfile: Dockerfile
      context: ./api
      target: dev
    command: ./worker_start
    depends_on:
      - chromadb
      - elasticsearch
      - redis
    restart: unless-stopped
    env_file: .env.docker
    environment:
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: "8000"
      ES_HOST: http://elasticsearch:9200
      QUEUE_NAME: 'chatbot'
      REDIS_HOST: redis
      RQ_REDIS_URL: redis://redis:6379/0
    volumes:
      - ./api:/opt/app


volumes:
  elasticsearch-data: {}
  redis-volume: {}
  chromadb_data: {}
  localstack-volume: {}

#networks:
#  chatbot-net:
#    name: ${NETWORK:-chatbot-net}
#    external: true
